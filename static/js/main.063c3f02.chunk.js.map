{"version":3,"sources":["images/rd2d.png","context/StarWarsContext.js","components/Loading.js","components/Table.js","components/AppliedFilter.js","utils/compareAndFilterArrays.js","components/NumericFilter.js","components/TextFilter.js","components/Sorter.js","components/Filters.js","components/Header.js","services/apiServices.js","utils/removeKeyFromObject.js","context/StarWarsProvider.js","App.js","index.js"],"names":["module","exports","StarWarsContext","createContext","Loading","Table","useContext","filters","tableHeaders","isFetching","getFilteredPlanets","order","filteredPlanets","numericColumns","filteredAndSortedPlanets","sort","a","b","varA","includes","column","Number","toLowerCase","varB","comparison","className","map","tableHeader","index","key","scope","planet","name","Object","entries","planetEntry","data-testid","AppliedFilter","props","numericFilter","deleteFilter","type","onClick","compareAndFilterArrays","originalArray","exclusionArray","filter","element","NumericFilter","columnFilters","comparisonFilters","addFilter","filterByNumericValues","currentSelectedColumnFilters","availableColumnFilters","hasAvailableColumnFilters","length","initialNumericFiltersState","value","useState","filtersData","setFiltersData","onChange","event","target","htmlFor","id","category","min","newSelectedColumnFilters","newAvailableColumnFilters","undefined","addFilterButtonClick","disabled","TextFilter","setFilters","filterByName","placeholder","objectKey","Sorter","applySort","sortData","setSortData","useEffect","header","checked","Filters","Header","src","r2d2","alt","href","apiInfo","url","fetch","requestResponse","json","data","results","fetchPlanetsInfo","removeKeyFromObject","object","StarWarsProvider","children","setData","setTableHeaders","setIsFetching","setColumnFilters","getPlanetsInfo","planetsInfo","planetsWithoutResidentsKey","keys","makeInitialSetup","contextValue","auxFilter","dataForFiltering","planetSearch","forEach","currentFilter","console","log","filterData","filterToDelete","newFilters","currFilter","Provider","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.063c3f02.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/rd2d.b7d71675.png\";","import { createContext } from 'react';\n\nconst StarWarsContext = createContext();\n\nexport default StarWarsContext;\n","import React from 'react';\n\nfunction Loading() {\n  return (<div>NOW LOADING...</div>);\n}\n\nexport default Loading;\n","import React, { useContext } from 'react';\nimport StarWarsContext from '../context/StarWarsContext';\nimport Loading from './Loading';\n\nfunction Table() {\n  const {\n    filters,\n    tableHeaders,\n    isFetching,\n    getFilteredPlanets,\n  } = useContext(StarWarsContext);\n\n  const { filters: { order } } = filters;\n\n  const filteredPlanets = getFilteredPlanets();\n  const numericColumns = [\n    'rotation_period',\n    'orbital_period',\n    'diameter',\n    'surface_water',\n    'population',\n  ];\n\n  // inspired by: https://morioh.com/p/9caf3015e0c0\n  const filteredAndSortedPlanets = filteredPlanets\n    .sort((a, b) => {\n      const varA = (\n        numericColumns.includes(order.column)\n          ? Number(a[order.column])\n          : a[order.column].toLowerCase()\n      );\n      const varB = (\n        numericColumns.includes(order.column)\n          ? Number(b[order.column])\n          : b[order.column].toLowerCase()\n      );\n\n      const defaultComparisonValue = 0;\n      const ascendingComparisonValue = 1;\n      const descendingComparisonValue = -1;\n      const comparisonInverter = -1;\n      let comparison = defaultComparisonValue;\n      if (varA > varB) {\n        comparison = ascendingComparisonValue;\n      } else if (varA < varB) {\n        comparison = descendingComparisonValue;\n      }\n      return (\n        (order.sort === 'ASC') ? comparison : comparison * comparisonInverter\n      );\n    });\n\n  function renderTable() {\n    return (\n      <table\n        className=\"table\n          table-striped table-bordered table-hover table-sm table-responsive\"\n      >\n        <thead className=\"thead-light\">\n          <tr>\n            {tableHeaders.map((tableHeader, index) => (\n              <th key={ index } scope=\"col\">{ tableHeader }</th>\n            ))}\n          </tr>\n        </thead>\n        <tbody>\n          {filteredAndSortedPlanets.map((planet) => (\n            <tr key={ planet.name }>\n              {Object.entries(planet).map((planetEntry, index) => (\n                planetEntry[0] === 'name'\n                  ? <td key={ index } data-testid=\"planet-name\">{ planetEntry[1] }</td>\n                  : <td key={ index }>{ planetEntry[1] }</td>\n              ))}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n\n    );\n  }\n\n  return (\n    <div>\n      { isFetching ? <Loading /> : renderTable()}\n    </div>\n  );\n}\n\nexport default Table;\n","import React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport StarWarsContext from '../context/StarWarsContext';\nimport './AppliedFilter.css';\n\nfunction AppliedFilter(props) {\n  const { numericFilter } = props;\n\n  const { deleteFilter } = useContext(StarWarsContext);\n\n  return (\n    <div>\n      <div className=\"appliedFilter-container\" data-testid=\"filter\">\n        { numericFilter.column }\n        <button\n          type=\"button\"\n          className=\"btn btn-outline-danger\"\n          onClick={ () => deleteFilter(numericFilter.column) }\n        >\n          X\n        </button>\n      </div>\n\n    </div>\n  );\n}\n\nAppliedFilter.propTypes = {\n  numericFilter: PropTypes.shape({\n    column: PropTypes.string,\n  }).isRequired,\n};\n\nexport default AppliedFilter;\n","function compareAndFilterArrays(originalArray, exclusionArray) {\n  return originalArray.filter((element) => !exclusionArray.includes(element));\n}\n\nexport default compareAndFilterArrays;\n","import React, { useState, useContext } from 'react';\nimport compareAndFilterArrays from '../utils/compareAndFilterArrays';\nimport StarWarsContext from '../context/StarWarsContext';\nimport './NumericFilter.css';\n\nfunction NumericFilter() {\n  const {\n    filters,\n    columnFilters,\n    comparisonFilters,\n    addFilter,\n  } = useContext(StarWarsContext);\n\n  const { filters: { filterByNumericValues } } = filters;\n\n  const currentSelectedColumnFilters = filterByNumericValues.map((element) => (\n    element.column\n  ));\n\n  const availableColumnFilters = compareAndFilterArrays(\n    columnFilters, currentSelectedColumnFilters,\n  );\n\n  const hasAvailableColumnFilters = (\n    availableColumnFilters && availableColumnFilters.length\n  );\n\n  const initialNumericFiltersState = {\n    column: availableColumnFilters[0],\n    comparison: comparisonFilters[0],\n    value: '0',\n  };\n  const [filtersData, setFiltersData] = useState(\n    { ...initialNumericFiltersState },\n  );\n\n  function onChange(event) {\n    const { name, value } = event.target;\n    setFiltersData({\n      ...filtersData,\n      [name]: value,\n    });\n  }\n\n  function addFilterButtonClick() {\n    addFilter(filtersData);\n\n    const newSelectedColumnFilters = [...filterByNumericValues, filtersData]\n      .map((element) => element.column);\n\n    const newAvailableColumnFilters = compareAndFilterArrays(\n      columnFilters, newSelectedColumnFilters,\n    );\n\n    setFiltersData({\n      ...filtersData,\n      column: newAvailableColumnFilters.length ? newAvailableColumnFilters[0] : undefined,\n    });\n  }\n\n  function renderFilters() {\n    return (\n      <div className=\"numericFilter-container\">\n        <div className=\"numericFilter-selectors\">\n          <label className=\"dropdown-input\" htmlFor=\"column-filter\">\n            Column Filter:\n            <select\n              id=\"column-filter\"\n              name=\"column\"\n              className=\"form-control\"\n              data-testid=\"column-filter\"\n              onChange={ (event) => onChange(event) }\n            >\n              {availableColumnFilters\n                .map((category, index) => (\n                  <option key={ index } value={ category }>{ category }</option>\n                ))}\n            </select>\n          </label>\n          <label className=\"dropdown-input\" htmlFor=\"comparison-filter\">\n            Filter by:\n            <select\n              id=\"comparison-filter\"\n              name=\"comparison\"\n              className=\"form-control\"\n              data-testid=\"comparison-filter\"\n              onChange={ (event) => onChange(event) }\n            >\n              {comparisonFilters.map((comparison, index) => (\n                <option key={ index } value={ comparison }>{ comparison }</option>\n              ))}\n            </select>\n          </label>\n          <label className=\" value-input\" htmlFor=\"value-filter\">\n            Value:\n            <input\n              type=\"number\"\n              id=\"value-filter\"\n              name=\"value\"\n              className=\"form-control\"\n              value={ filtersData.value }\n              min={ 0 }\n              data-testid=\"value-filter\"\n              onChange={ (event) => onChange(event) }\n            />\n          </label>\n        </div>\n        <button\n          type=\"button\"\n          className=\"btn btn-primary\"\n          data-testid=\"button-filter\"\n          onClick={ () => addFilterButtonClick() }\n        >\n          Apply Filter\n        </button>\n      </div>\n    );\n  }\n\n  function renderDisabledFilters() {\n    return (\n      <div className=\"numericFilter-container\">\n        <div className=\"numeric-filter-selectors\">\n          <label htmlFor=\"column-filter\">\n            Column Filter:\n            <select id=\"column-filter\" disabled>\n              <option>No filters available</option>\n            </select>\n          </label>\n          <label htmlFor=\"comparison-filter\">\n            Filter by:\n            <select id=\"comparison-filter\" disabled>\n              {comparisonFilters.map((comparison, index) => (\n                <option key={ index } value={ comparison }>{ comparison }</option>\n              ))}\n            </select>\n          </label>\n          <label htmlFor=\"value-filter\">\n            Value:\n            <input className=\"value-input\" id=\"value-filter\" disabled />\n          </label>\n        </div>\n        <button type=\"button\" disabled>\n          Apply Filter\n        </button>\n      </div>\n    );\n  }\n\n  return (\n    <div>\n      { hasAvailableColumnFilters ? renderFilters() : renderDisabledFilters() }\n    </div>\n  );\n}\n\nexport default NumericFilter;\n","import React, { useContext } from 'react';\nimport StarWarsContext from '../context/StarWarsContext';\nimport './TextFilter.css';\n\nfunction TextFilter() {\n  const {\n    filters,\n    setFilters,\n  } = useContext(StarWarsContext);\n\n  const { filters: { filterByName } } = filters;\n\n  const onChange = (event) => {\n    const { name: objectKey, value } = event.target;\n\n    setFilters({\n      ...filters,\n      filters: {\n        ...filters.filters,\n        filterByName: {\n          ...filters.filters.filterByName,\n          [objectKey]: value,\n        },\n      },\n    });\n  };\n\n  return (\n    <div className=\"textFilter-container\">\n      <label htmlFor=\"text-input\">\n        Planet name:\n        <input\n          type=\"text\"\n          id=\"text-input\"\n          name=\"name\"\n          className=\"text-input border border-primary border-5 rounded\"\n          data-testid=\"name-filter\"\n          placeholder=\"Type planet name\"\n          onChange={ (event) => onChange(event) }\n          value={ filterByName.name }\n        />\n      </label>\n\n    </div>\n  );\n}\n\nexport default TextFilter;\n","import React, { useContext, useEffect, useState } from 'react';\nimport StarWarsContext from '../context/StarWarsContext';\nimport './Sorter.css';\n\nfunction Sorter() {\n  const {\n    tableHeaders,\n    applySort,\n  } = useContext(StarWarsContext);\n\n  const [sortData, setSortData] = useState({\n    column: '',\n    sort: 'ASC',\n  });\n\n  function onChange(event) {\n    const { name: objectKey, value } = event.target;\n    setSortData({\n      ...sortData,\n      [objectKey]: value,\n    });\n  }\n\n  useEffect(() => {\n    setSortData({\n      ...sortData,\n      column: tableHeaders[0],\n    });\n  }, [tableHeaders]);\n  return (\n    <div className=\"sorter-container\">\n      <div className=\"sorter-selectors\">\n        <label className=\"column-sort\" htmlFor=\"column-sort\">\n          Sort by\n          <select\n            id=\"column-sort\"\n            name=\"column\"\n            className=\"form-control\"\n            data-testid=\"column-sort\"\n            onChange={ (event) => onChange(event) }\n          >\n            {tableHeaders.map((header, index) => (\n              <option key={ index } value={ header }>{ header }</option>\n            ))}\n          </select>\n        </label>\n        <label className=\"sort-label\" htmlFor=\"column-sort-input-asc\">\n          Ascending\n          <input\n            type=\"radio\"\n            id=\"column-sort-input-asc\"\n            name=\"sort\"\n            className=\"radio-input\"\n            data-testid=\"column-sort-input-asc\"\n            value=\"ASC\"\n            checked={ sortData.sort === 'ASC' }\n            onChange={ (event) => onChange(event) }\n          />\n        </label>\n        <label className=\"sort-label\" htmlFor=\"column-sort-input-desc\">\n          Descending\n          <input\n            type=\"radio\"\n            id=\"column-sort-input-desc\"\n            name=\"sort\"\n            className=\"radio-input\"\n            data-testid=\"column-sort-input-desc\"\n            value=\"DESC\"\n            checked={ sortData.sort === 'DESC' }\n            onChange={ (event) => onChange(event) }\n          />\n        </label>\n      </div>\n      <button\n        type=\"button\"\n        className=\"btn btn-primary\"\n        data-testid=\"column-sort-button\"\n        onClick={ () => applySort(sortData) }\n      >\n        Apply sort\n      </button>\n    </div>\n  );\n}\n\nexport default Sorter;\n","import React, { useContext } from 'react';\nimport StarWarsContext from '../context/StarWarsContext';\nimport AppliedFilter from './AppliedFilter';\nimport NumericFilter from './NumericFilter';\nimport TextFilter from './TextFilter';\nimport Sorter from './Sorter';\nimport './Filters.css';\n\nfunction Filters() {\n  const {\n    filters,\n  } = useContext(StarWarsContext);\n\n  const { filters: { filterByNumericValues } } = filters;\n\n  return (\n    <div className=\"filters-container\">\n      <TextFilter />\n      <NumericFilter />\n      {filterByNumericValues.map((numericFilter, index) => (\n        <AppliedFilter key={ index } numericFilter={ numericFilter } />\n      ))}\n      <Sorter />\n    </div>\n  );\n}\n\nexport default Filters;\n","import React from 'react';\nimport r2d2 from '../images/rd2d.png';\nimport './Header.css';\n\nfunction Header() {\n  return (\n    <header>\n      <div className=\"banner\">\n        <img src={ r2d2 } alt=\"R2d2 Robot from StarWars series\" />\n        <h1>Star Wars Data Table</h1>\n        <p>Bruno Lemos Coutinho</p>\n      </div>\n      <div className=\"author_info\">\n        <a\n          href=\"https://www.linkedin.com/in/brunolemoscoutinho/\"\n          target=\"_blank\"\n        >\n          Linkedin\n        </a>\n        <a\n          href=\"https://github.com/BrunoLemosCoutinho\"\n          target=\"_blank\"\n        >\n          Github\n        </a>\n        <a\n          href=\"mailto:brunolemos.ssa@gmail.com\"\n          target=\"_blank\"\n        >\n          Email\n        </a>\n      </div>\n    </header>\n  );\n}\n\nexport default Header;\n","const apiInfo = {\n  api: 'https://swapi-trybe.herokuapp.com/api/',\n  endpoint: 'planets',\n};\n\nconst url = `${apiInfo.api}${apiInfo.endpoint}`;\n\nasync function fetchPlanetsInfo() {\n  const requestResponse = await fetch(url);\n  const data = await requestResponse.json();\n  return data.results;\n}\n\nexport default fetchPlanetsInfo;\n","function removeKeyFromObject(object, key) {\n  const { [key]: deletedKey, ...otherKeys } = object;\n  return otherKeys;\n}\n\nexport default removeKeyFromObject;\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport fetchPlanetsInfo from '../services/apiServices';\n// import mockFetchPlanetsInfo from '../services/mockApiServices';\nimport removeKeyFromObject from '../utils/removeKeyFromObject';\nimport StarWarsContext from './StarWarsContext';\n\nfunction StarWarsProvider({ children }) {\n  const [data, setData] = useState([]);\n  const [tableHeaders, setTableHeaders] = useState([]);\n  const [isFetching, setIsFetching] = useState(true);\n\n  const initialFiltersState = {\n    filters: {\n      filterByName: {\n        name: '',\n      },\n      filterByNumericValues: [],\n      order: {\n        column: 'name',\n        sort: 'ASC',\n      },\n    },\n  };\n  const [filters, setFilters] = useState(initialFiltersState);\n  const [columnFilters, setColumnFilters] = useState(\n    [\n      'population', 'orbital_period', 'diameter',\n      'rotation_period', 'surface_water',\n    ],\n  );\n  const comparisonFilters = ['maior que', 'menor que', 'igual a'];\n\n  async function getPlanetsInfo() {\n    const planetsInfo = await fetchPlanetsInfo();\n    const planetsWithoutResidentsKey = planetsInfo.map((planet) => (\n      removeKeyFromObject(planet, 'residents')\n    ));\n    return planetsWithoutResidentsKey;\n  }\n\n  async function makeInitialSetup() {\n    const planetsInfo = await getPlanetsInfo();\n    setData(planetsInfo);\n    setTableHeaders(Object.keys(planetsInfo[0]));\n    setIsFetching(false);\n  }\n\n  function getFilteredPlanets() {\n    let dataForFiltering = [...data];\n    let auxFilter;\n\n    const {\n      filters: {\n        filterByName: { name: planetSearch },\n        filterByNumericValues,\n      },\n    } = filters;\n\n    const minArraySize = 0;\n    const hasNumericFilters = filterByNumericValues.length > minArraySize;\n\n    if (hasNumericFilters) {\n      filterByNumericValues.forEach((currentFilter) => {\n        const { column, comparison, value } = currentFilter;\n        switch (comparison) {\n        case 'maior que':\n          auxFilter = dataForFiltering.filter((planet) => (\n            Number(planet[column]) > Number(value)\n          ));\n          dataForFiltering = [...auxFilter];\n          break;\n        case 'menor que':\n          auxFilter = dataForFiltering.filter((planet) => (\n            Number(planet[column]) < Number(value)\n          ));\n          dataForFiltering = [...auxFilter];\n          break;\n        case 'igual a':\n          auxFilter = dataForFiltering.filter((planet) => (\n            Number(planet[column]) === Number(value)\n          ));\n          dataForFiltering = [...auxFilter];\n          break;\n        default:\n          console.log('Comparison information error');\n        }\n      });\n    }\n\n    return dataForFiltering.filter((planet) => (\n      planet.name.toLowerCase().includes(planetSearch.toLowerCase())\n    ));\n  }\n\n  function addFilter(filterData) {\n    setFilters({\n      ...filters,\n      filters: {\n        ...filters.filters,\n        filterByNumericValues: [\n          ...filters.filters.filterByNumericValues,\n          filterData,\n        ],\n      },\n    });\n  }\n\n  function deleteFilter(filterToDelete) {\n    const { filters: { filterByNumericValues } } = filters;\n    const newFilters = filterByNumericValues.filter((currFilter) => (\n      currFilter.column !== filterToDelete\n    ));\n    setFilters({\n      ...filters,\n      filters: {\n        ...filters.filters,\n        filterByNumericValues: newFilters,\n      },\n    });\n  }\n\n  function applySort(sortData) {\n    setFilters({\n      ...filters,\n      filters: {\n        ...filters.filters,\n        order: {\n          ...sortData,\n        },\n      },\n    });\n  }\n\n  useEffect(() => {\n    makeInitialSetup();\n    // mockedInitialSetup();\n  }, []);\n\n  const contextValue = {\n    tableHeaders,\n    isFetching,\n    filters,\n    columnFilters,\n    comparisonFilters,\n    getFilteredPlanets,\n    setFilters,\n    setColumnFilters,\n    addFilter,\n    deleteFilter,\n    applySort,\n    // mockedInitialSetup,\n  };\n\n  return (\n    <StarWarsContext.Provider value={ contextValue }>\n      { children}\n    </StarWarsContext.Provider>\n  );\n}\n\nStarWarsProvider.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default StarWarsProvider;\n\n/*\n  // IN CASE OF API FAILURE\n  // Remova depois que a API retornar\n  const getMockedPlanetsInfo = async () => {\n    const planetsInfo = mockFetchPlanetsInfo();\n    const planetsWithoutResidentsKey = planetsInfo.map((planet) => (\n      removeKeyFromObject(planet, 'residents')\n    ));\n    return planetsWithoutResidentsKey;\n  };\n\n  // Remova depois que a API retornar\n  const mockedInitialSetup = async () => {\n    console.log('Retrieving  MOCKED API info');\n    const planetsInfo = await getMockedPlanetsInfo();\n    console.log('Request MOCKED response:', planetsInfo);\n    setData(planetsInfo);\n    setTableHeaders(Object.keys(planetsInfo[0]));\n    setIsFetching(false);\n  };\n  */\n","import React from 'react';\nimport { Table, Filters, Header } from './components';\nimport StarWarsProvider from './context/StarWarsProvider';\nimport './App.css';\n\nfunction App() {\n  return (\n    <StarWarsProvider>\n      <Header />\n      <main>\n        <section>\n          <Filters />\n          <Table />\n        </section>\n      </main>\n    </StarWarsProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}